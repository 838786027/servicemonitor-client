/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.gosun.servicemonitor.rpc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Node extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Node\",\"namespace\":\"com.gosun.servicemonitor.rpc\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"note\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public java.lang.CharSequence role;
  @Deprecated public java.lang.CharSequence note;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Node() {}

  /**
   * All-args constructor.
   */
  public Node(java.lang.CharSequence id, java.lang.CharSequence ip, java.lang.CharSequence role, java.lang.CharSequence note) {
    this.id = id;
    this.ip = ip;
    this.role = role;
    this.note = note;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return ip;
    case 2: return role;
    case 3: return note;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: ip = (java.lang.CharSequence)value$; break;
    case 2: role = (java.lang.CharSequence)value$; break;
    case 3: note = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'role' field.
   */
  public java.lang.CharSequence getRole() {
    return role;
  }

  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.CharSequence value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'note' field.
   */
  public java.lang.CharSequence getNote() {
    return note;
  }

  /**
   * Sets the value of the 'note' field.
   * @param value the value to set.
   */
  public void setNote(java.lang.CharSequence value) {
    this.note = value;
  }

  /** Creates a new Node RecordBuilder */
  public static com.gosun.servicemonitor.rpc.Node.Builder newBuilder() {
    return new com.gosun.servicemonitor.rpc.Node.Builder();
  }
  
  /** Creates a new Node RecordBuilder by copying an existing Builder */
  public static com.gosun.servicemonitor.rpc.Node.Builder newBuilder(com.gosun.servicemonitor.rpc.Node.Builder other) {
    return new com.gosun.servicemonitor.rpc.Node.Builder(other);
  }
  
  /** Creates a new Node RecordBuilder by copying an existing Node instance */
  public static com.gosun.servicemonitor.rpc.Node.Builder newBuilder(com.gosun.servicemonitor.rpc.Node other) {
    return new com.gosun.servicemonitor.rpc.Node.Builder(other);
  }
  
  /**
   * RecordBuilder for Node instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Node>
    implements org.apache.avro.data.RecordBuilder<Node> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence ip;
    private java.lang.CharSequence role;
    private java.lang.CharSequence note;

    /** Creates a new Builder */
    private Builder() {
      super(com.gosun.servicemonitor.rpc.Node.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.gosun.servicemonitor.rpc.Node.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.note)) {
        this.note = data().deepCopy(fields()[3].schema(), other.note);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Node instance */
    private Builder(com.gosun.servicemonitor.rpc.Node other) {
            super(com.gosun.servicemonitor.rpc.Node.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.note)) {
        this.note = data().deepCopy(fields()[3].schema(), other.note);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.gosun.servicemonitor.rpc.Node.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.gosun.servicemonitor.rpc.Node.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public com.gosun.servicemonitor.rpc.Node.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ip = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ip' field */
    public com.gosun.servicemonitor.rpc.Node.Builder clearIp() {
      ip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'role' field */
    public java.lang.CharSequence getRole() {
      return role;
    }
    
    /** Sets the value of the 'role' field */
    public com.gosun.servicemonitor.rpc.Node.Builder setRole(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.role = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'role' field has been set */
    public boolean hasRole() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'role' field */
    public com.gosun.servicemonitor.rpc.Node.Builder clearRole() {
      role = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'note' field */
    public java.lang.CharSequence getNote() {
      return note;
    }
    
    /** Sets the value of the 'note' field */
    public com.gosun.servicemonitor.rpc.Node.Builder setNote(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.note = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'note' field has been set */
    public boolean hasNote() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'note' field */
    public com.gosun.servicemonitor.rpc.Node.Builder clearNote() {
      note = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Node build() {
      try {
        Node record = new Node();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ip = fieldSetFlags()[1] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.role = fieldSetFlags()[2] ? this.role : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.note = fieldSetFlags()[3] ? this.note : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
